const WEBHOOK_N8N  = '[[WEBHOOK_URL_N8N]]';
const WEBHOOK_MAKE = '[[WEBHOOK_URL_MAKE]]';

const appState = { user:null, missions:[], stats:{hp:100,xp:0,gold:0,streak:0}, penalties:[], skills:['focus'], mood:'neutral' };
const $ = s=>document.querySelector(s);
function show(v){v.hidden=false}function hide(v){v.hidden=true}
function toast(m){const t=$('#toast');t.textContent=m;t.classList.add('show');setTimeout(()=>t.classList.remove('show'),1500)}
function save(){localStorage.setItem('arc_state',JSON.stringify(appState))}function load(){const s=localStorage.getItem('arc_state');if(s)Object.assign(appState,JSON.parse(s))}
function render(){ $('#bar-hp').style.width=Math.max(0,Math.min(100,appState.stats.hp))+'%'; $('#bar-xp').style.width=Math.max(0,Math.min(100,appState.stats.xp%100))+'%'; $('#stat-gold').textContent=appState.stats.gold; $('#stat-streak').textContent=appState.stats.streak; const wrap=$('#quests'); wrap.innerHTML=''; appState.missions.forEach(m=>{ const el=document.createElement('div'); el.className='quest'; el.innerHTML=`<h4>${m.title}</h4><div class='meta'>XP: ${m.xp} • Gold: ${m.gold} • Source: ${m.source} • Status: ${m.status}</div><div class='row'>${m.status==='todo'?`<button class='btn' data-act='claim'>Claim</button><button class='btn secondary' data-act='fail'>Fail</button>`:`<span class='meta'>Done</span>`}${m.calendarLink?`<a class='btn secondary' href='${m.calendarLink}' target='_blank'>View event</a>`:''}</div>`; el.addEventListener('click',async e=>{const act=e.target?.dataset?.act;if(!act)return;m.status=(act==='claim')?'done':'failed'; if(act==='claim'){appState.stats.xp+=m.xp;appState.stats.gold+=m.gold;appState.stats.streak=(appState.stats.streak||0)+1;} if(act==='fail'){appState.stats.hp=Math.max(0,appState.stats.hp-5);} save(); render(); if(WEBHOOK_N8N&&WEBHOOK_N8N.startsWith('http')){fetch(`${WEBHOOK_N8N}/update`,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({missionId:m.id,status:m.status})}).catch(()=>{});} toast(act==='claim'?'Quest claimed!':'Quest failed');}); wrap.appendChild(el); }); }
function addQuest(){ const t=$('#q-title').value.trim(); const xp=+$('#q-xp').value||0; const g=+$('#q-gold').value||0; const s=$('#q-source').value||'system'; if(!t)return toast('Title required'); appState.missions.unshift({id:'q_'+Date.now(),title:t,xp, gold:g, source:s,status:'todo'}); $('#q-title').value=$('#q-xp').value=$('#q-gold').value=''; save(); render(); }
async function postJSON(url,body){const r=await fetch(url,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(body)}); if(!r.ok)throw new Error('HTTP '+r.status); return r.json();}
async function checkCalendar(){ try{ const userId=appState.user?.id||'guest'; const now=new Date(); const from=now.toISOString().slice(0,10); const toD=new Date(now); toD.setDate(toD.getDate()+7); const to=toD.toISOString().slice(0,10); toast('Syncing calendar…'); const data=await postJSON(`${WEBHOOK_N8N}/calendar-sync`,{userId, dateFrom:from, dateTo:to}); if(Array.isArray(data.missions))appState.missions=data.missions; if(data.stats)appState.stats=data.stats; save(); render(); toast('Calendar synced'); }catch(e){console.error(e);toast('Calendar sync failed');} }
async function autoPlan(){ try{ const stats={hp:appState.stats.hp,xp:appState.stats.xp,skills:appState.skills,mood:appState.mood}; const now=new Date(); const s=new Date(now); s.setHours(18,0,0,0); const e=new Date(now); e.setHours(19,0,0,0); const freeSlots=[{start:s.toISOString(),end:e.toISOString()}]; const recentFails=appState.missions.filter(m=>m.status==='failed').map(m=>m.id); toast('Planning…'); const data=await postJSON(`${WEBHOOK_MAKE}/coach`,{stats,freeSlots,recentFails}); if(Array.isArray(data.sideQuests)){ const injected=data.sideQuests.map((q,i)=>({id:`sq_${Date.now()}_${i}`,title:q.title,xp:+q.xp||10,gold:+q.gold||5,source:'system',status:'todo',proof:q.proof||'checklist'})); appState.missions=[...injected,...appState.missions]; } if(Array.isArray(data.penalties)&&data.penalties.length){ appState.penalties=data.penalties; alert('Penalties: '+data.penalties.map(p=>`${p.type}:${p.value}`).join(', ')); } save(); render(); toast('Side quests added'); }catch(e){console.error(e);toast('Auto-Plan failed');} }
async function createEvents(){ try{ const quests=appState.missions.filter(m=>m.status==='todo').slice(0,3); if(!quests.length)return toast('No TODO quests'); toast('Creating events…'); const data=await postJSON(`${WEBHOOK_N8N}/create-events`,{userId:appState.user?.id||'guest',quests}); if(Array.isArray(data?.created)){ for(const ev of data.created){ const m=appState.missions.find(x=>x.id===ev.questId); if(m)m.calendarLink=ev.htmlLink; } save(); render(); } toast('Events created'); }catch(e){console.error(e);toast('Failed to create events');} }
function wire(){ $('#btn-get-started').onclick=()=>{hide($('#view-intro'));show($('#view-auth'));}; $('#btn-login').onclick=()=>{const id=$('#input-user').value.trim()||'guest'; appState.user={id}; hide($('#view-auth')); show($('#view-dashboard')); save(); render();}; $('#btn-add-quest').onclick=addQuest; $('#btn-check-calendar').onclick=checkCalendar; $('#btn-auto-plan').onclick=autoPlan; $('#btn-create-events').onclick=createEvents; }
function particles(){ const c=document.getElementById('particle-canvas'); const ctx=c.getContext('2d'); function resize(){c.width=innerWidth;c.height=innerHeight} addEventListener('resize',resize); resize(); const pts=new Array(120).fill(0).map(()=>({x:Math.random()*c.width,y:Math.random()*c.height,dx:(Math.random()-.5)*.6,dy:(Math.random()-.5)*.6,r:1+Math.random()*2})); (function tick(){ ctx.clearRect(0,0,c.width,c.height); for(const p of pts){ p.x+=p.dx; p.y+=p.dy; if(p.x<0||p.x>c.width)p.dx*=-1; if(p.y<0||p.y>c.height)p.dy*=-1; ctx.fillStyle='hsla('+(Math.random()*360|0)+',70%,60%,.5)'; ctx.beginPath(); ctx.arc(p.x,p.y,p.r,0,Math.PI*2); ctx.fill(); } requestAnimationFrame(tick); })(); }
load(); addEventListener('DOMContentLoaded',()=>{particles(); wire(); render();});
